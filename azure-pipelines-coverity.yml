# Set up a cron that runs midnight daily
# Coverity limits to 4 times a day, so, only do it once a day on master
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight Build for Coverity
  branches:
    include:
    - coverity-dev

pool:
  vmImage: ubuntu-latest

jobs:
- job: Coverity_Linux_Build
  variables:
    PLATFORM: linux
    BITS: 64
    HOST: x86_64
    CHECK_RULE: coverage
    GCOV: 1
    PKG_RULE: gzip
    PYPI: yes
    COVERITY_SCAN_PROJECT_NAME: 'analogdevicesinc/libiio'
    COVERITY_SCAN_BRANCH_PATTERN: master
    COVERITY_SCAN_NOTIFICATION_EMAIL: "cse-ci-notifications@analog.com"
    COVERITY_SCAN_BUILD_COMMAND: make
    # Do not change - the tool expects this
    COVERITY_SCAN_RESULT_DIR: cov-int
  container: 'tfcollins/libiio_ubuntu_20_04-ci:latest'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true
  - script: |
      wget -q https://scan.coverity.com/download/cxx/linux64 --post-data "token=$(COVERITY_SCAN_TOKEN)&project=${COVERITY_SCAN_PROJECT_NAME}" -O cov-analysis-linux64.tar.gz
      mkdir cov-analysis-linux64
      tar xzf cov-analysis-linux64.tar.gz --strip 1 -C cov-analysis-linux64
    displayName: 'Download Coverity Tool'
  - script: |
      mkdir build && cd build
      cmake .. -DWITH_HWMON=ON -DWITH_SERIAL_BACKEND=ON -DWITH_EXAMPLES=ON
    displayName: 'Configure with CMake'
  - script: |
      export PATH=`pwd`/cov-analysis-linux64/bin:$PATH
      cd build
      cov-build --dir ${COVERITY_SCAN_RESULT_DIR} ${COVERITY_SCAN_BUILD_COMMAND}
    displayName: 'Build with cov-build'
  - script: |
      cd build
      tar czvf libiio.tgz ${COVERITY_SCAN_RESULT_DIR}
      curl \
        --form project=${COVERITY_SCAN_PROJECT_NAME} \
        --form token=$(COVERITY_SCAN_TOKEN) \
        --form email=${COVERITY_SCAN_NOTIFICATION_EMAIL} \
        --form file=@libiio.tgz \
        --form version=$(Build.SourceVersion) \
          https://scan.coverity.com/builds?project=${COVERITY_SCAN_PROJECT_NAME}
    displayName: 'Try to send to Coverity'
- job: Coverity_Windows_Build
  variables:
    PLATFORM: Windows
    BITS: 64
    HOST: x86_64
    CHECK_RULE: coverage
    GCOV: 1
    PKG_RULE: gzip
    PYPI: yes
    COVERITY_SCAN_PROJECT_NAME: 'analogdevicesinc/libiio-win'
    COVERITY_SCAN_BRANCH_PATTERN: master
    COVERITY_SCAN_NOTIFICATION_EMAIL: "cse-ci-notifications@analog.com"
    COVERITY_SCAN_BUILD_COMMAND: cmake --build . --config Release
    # Do not change - the tool expects this
    COVERITY_SCAN_RESULT_DIR: cov-int
    # Host Box
    COMPILER: 'Visual Studio 17 2022'
  pool:
    vmImage: 'windows-2022'
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true
  - task: PowerShell@2
    displayName: 'Install Dependencies'
    inputs:
      targetType: inline
      script: |
        git submodule update --init
        if ( !( Test-Path deps ) ) {
           mkdir deps
        }
        cd deps
        mkdir libxml
        wget https://www.zlatkovic.com/pub/libxml/64bit/libxml2-2.9.3-win32-x86_64.7z -OutFile "libxml.7z"
        7z x -y libxml.7z
        rm libxml.7z
        cd C:\
        wget http://swdownloads.analog.com/cse/build/libiio-win-deps-libusb1.0.24.zip -OutFile "libiio-win-deps.zip"
        7z x -y "C:\libiio-win-deps.zip"
  - task: PowerShell@2
    displayName: 'Download Coverity Tool'
    inputs:
      targetType: inline
      script: |
        wget -q https://scan.coverity.com/download/cxx/win64 --post-data "token=$(COVERITY_SCAN_TOKEN_WIN)&project=${COVERITY_SCAN_PROJECT_NAME}" -O cov-analysis-linux64.tar.gz
  - task: PowerShell@2
    displayName: 'Configure with CMake'
    inputs:
      targetType: inline
      script: |
        mkdir build
        cd build-x64
        cmake -G "${COMPILER}" -DCMAKE_SYSTEM_PREFIX_PATH="C:" -DENABLE_IPV6=OFF -DWITH_USB_BACKEND=ON -DWITH_SERIAL_BACKEND=ON -DLIBXML2_LIBRARIES="C:\\libs\\64\\libxml2.lib" -DLIBUSB_LIBRARIES="C:\\libs\\64\\libusb-1.0.lib" -DLIBSERIALPORT_LIBRARIES="C:\\libs\\64\\libserialport.dll.a" -DLIBUSB_INCLUDE_DIR="C:\\include\\libusb-1.0" -DLIBXML2_INCLUDE_DIR="C:\\include\\libxml2" ..
  - task: PowerShell@2
    displayName: 'Build with cov-build'
    inputs:
      targetType: inline
      script: |
        cov-build --dir ${COVERITY_SCAN_RESULT_DIR} ${COVERITY_SCAN_BUILD_COMMAND}
  - task: PowerShell@2
    displayName: 'Try to send to Coverity'
    inputs:
      targetType: inline
      script: |
        cd build
        tar czvf libiio.tgz ${COVERITY_SCAN_RESULT_DIR}
        curl \
          --form project=${COVERITY_SCAN_PROJECT_NAME} \
          --form token=$(COVERITY_SCAN_TOKEN) \
          --form email=${COVERITY_SCAN_NOTIFICATION_EMAIL} \
          --form file=@libiio.tgz \
          --form version=$(Build.SourceVersion) \
            https://scan.coverity.com/builds?project=${COVERITY_SCAN_PROJECT_NAME}

